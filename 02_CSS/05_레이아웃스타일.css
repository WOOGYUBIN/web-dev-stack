/* width(가로), height(높이) */
/* px : 고정 크기 / % : 부모 기준 비율 / vw, vh : 뷰포트 너비, 높이 기준 비율 */
#fixed-size {
  width: 300px;
  height: 150px;
  background-color: lightblue;
}
#variable-size {
  width: 80vw;
  height: 100vh;
  background-color: lightgreen;
}
/* padding, margin */
.space {
  background: lightyellow;
  border: 1px solid;
  margin-bottom: 10px;
}
#padding1 {
  padding: 20px;
}
#padding2 {
  padding-top: 30px;
  padding-left: 10px;
  padding-right: 20px;
  padding-bottom: 40px;
  padding: 30px 20px 40px 10px;
  /* padding-top: 30px;
  padding-left: 10px;
  padding-right: 20px;
  padding-bottom: 40px; 이렇게 쓴거랑 padding: 30px 20px 40px 10px;
  이 순서로 쓴거랑 똑같음
  순서는 시계방향으로 표기 top right bottom left */
  padding: 30px 20px 40px 10px;
  /* top right/ left bottom */
  padding: 30px 20px 40px 20px;
  /* top/bottom right/left */
  padding: 30px 20px;
}

#margin1 {
  margin: 20px;
}
#margin2 {
  margin: 5px 15px 10px 30px;
  /* 뭐가 되었든 위에서 주든 아래에서 주든 최대값만 본다
  ex) 위에서 20px을 주고 아래에서 5px를 주면 25px가 되어야 하는데 최대값만 보기 때문에 20px가 됨 */
}
.collapse-box {
  background-color: lightcoral;
  padding: 10px;
  border: 1px solid #444;
}
#box1 {
  margin-bottom: 50px;
}
#box2 {
  margin-top: 30px;
}
.center-box {
  width: 200px;
  height: 100px;
  line-height: 100px;
  background: lightseagreen;
  color: white;
  text-align: center;
  line-height: 100px;
  margin: auto;
}
.border {
  width: 100px;
  height: 100px;
  margin: 10px;
  background: #eee;
  display: inline-block;
}
#border1 {
  /* solid : 실선 */
  border: 3px solid red;
}
#border2 {
  /* dashed : 점선 */
  border: 5px dashed green;
}
#border3 {
  /* dotted : 도트  */
  border: 2px dotted blue;
}
.radius-box {
  width: 120px;
  height: 120px;
  background: plum;
  color: white;
  text-align: center;
  line-height: 120px;
  margin-bottom: 10px;
}
.radius1 {
  border-radius: 10px;
}
.radius2 {
  border-radius: 50%;
  /* 지금 여기서는 width값이랑 height값의 1/2값이기 때문에 60px임
    50% = 60px
  width값이랑 height값은 언제든지 변형될 수 있음
  만약에 width값이랑 height값 둘다 150px이면 
  50% = 75px이 됨
  px로 안건들고 %로 해주면 width, height값 수정해도 번거롭게 px로 수정할 필요 없음 */
}
/* box-sizing */
.box {
  width: 300px;
  height: 200px;
  padding: 20px;
  border: 10px solid;
  background-color: lightcoral;
  margin: 10px;
}
.box-content {
  box-sizing: content-box;
}
.box-border {
  box-sizing: border-box;
}
/* display */
.display {
  background-color: pink;
  padding: 10px;
  margin: 5px;
  width: 150px;
  height: 70px;
}
.display-inline {
  display: inline;
}
.display-block {
  display: block;
}
.display-inline-block {
  display: inline-block;
}
/* float */
.float {
  float: left;
  width: 80px;
  height: 80px;
  margin: 5px;
  background: skyblue;
  text-align: center;
  line-height: 80px;
}
/* position */
#outer {
  position: relative;
  width: 400px;
  height: 200px;
  background: #f4f4f4;
  overflow: auto;
}
.position-box {
  width: 100px;
  height: 100px;
}
#relative {
  /* relative의 특징- 본인 현재 위치에서 이동 */
  background: orange;
  position: relative;
  /* top, bottom, left, right */
  bottom: 50px;
  right: -50px;
}
#absolute {
  /* absolute의 특징- 브라우저 맨위에 위치가 기준임 거기서 이동 */
  /* absoulute는 어떤 영역안으로 넣고 싶을 때 부모의 기준으로 relaive를 넣은 뒤 처리한다 */
  background: green;
  position: absolute;
  top: 20px;
  left: 30px;
}
#fixed {
  /* 스크롤하면 원래 위치에 고정된채 계속있음 */
  background: red;
  position: fixed;
  right: 20px;
  top: 30px;
}
#sticky {
  background: blue;
  position: sticky;
  top: 0px;
}
/* visibility */
.visibility {
  width: 100px;
  height: 100px;
  margin: 10px;
  background: lightgray;
  display: inline-block;
}
#vis2 {
  visibility: visible;
}
#vis1 {
  visibility: hidden;
}
#dis1 {
  display: none;
}
#z-outer {
  width: 200px;
  height: 200px;
  background: #ddd;
  position: relative;
}
.z-index {
  width: 100px;
  height: 100px;
  position: absolute;
  opacity: 0.5;
}

#z-index1 {
  background: red;
  z-index: 1;
  top: 20px;
  left: 20px;
}
#z-index2 {
  z-index: 2;
  background: green;
  top: 40px;
  left: 40px;
}
#z-index3 {
  background: blue;
  z-index: 9999;
}
